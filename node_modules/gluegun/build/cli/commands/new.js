"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var NewCommand = {
    name: 'new',
    alias: ['n', 'create'],
    description: 'Creates a new gluegun cli',
    hidden: false,
    run: function (toolbox) { return __awaiter(_this, void 0, void 0, function () {
        var parameters, generate, filesystem, print, strings, system, meta, kebabCase, colors, props, validName, active, files, ext, yarnOrNpm;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parameters = toolbox.parameters, generate = toolbox.template.generate, filesystem = toolbox.filesystem, print = toolbox.print, strings = toolbox.strings, system = toolbox.system, meta = toolbox.meta;
                    kebabCase = strings.kebabCase;
                    colors = print.colors;
                    props = {
                        name: parameters.first,
                        typescript: parameters.options.typescript,
                        extension: parameters.options.typescript ? 'ts' : 'js',
                    };
                    if (!props.name || props.name.length === 0) {
                        print.error('You must provide a valid CLI name.');
                        print.error('Example: gluegun new foo');
                        return [2 /*return*/, undefined];
                    }
                    else if (!/^[a-z0-9-]+$/.test(props.name)) {
                        validName = kebabCase(props.name);
                        print.error(props.name + " is not a valid name. Use lower-case and dashes only.");
                        print.error("Suggested: gluegun new " + validName);
                        return [2 /*return*/, undefined];
                    }
                    return [4 /*yield*/, filesystem.dir(props.name)];
                case 1:
                    _a.sent();
                    active = [];
                    // executable is treated specially
                    active.push(generate({
                        template: "cli/bin/cli-executable.ejs",
                        target: "./" + props.name + "/bin/" + props.name,
                        props: props,
                    }));
                    files = [
                        '__tests__/cli-integration.test.js.ejs',
                        'docs/commands.md.ejs',
                        'docs/plugins.md.ejs',
                        'src/commands/generate.js.ejs',
                        'src/commands/default.js.ejs',
                        'src/extensions/cli-extension.js.ejs',
                        'src/templates/model.js.ejs.ejs',
                        'src/cli.js.ejs',
                        'LICENSE.ejs',
                        'package.json.ejs',
                        'readme.md.ejs',
                        '.gitignore.ejs',
                    ];
                    if (props.typescript) {
                        files.push('tsconfig.json.ejs');
                        files.push('tslint.json.ejs');
                    }
                    active = files.reduce(function (prev, file) {
                        var template = "cli/" + file;
                        var target = props.name + "/" +
                            (props.typescript && file.includes('.js.ejs') ? file.replace('.js.ejs', '.ts') : file.replace('.ejs', ''));
                        var gen = generate({ template: template, target: target, props: props });
                        return prev.concat([gen]);
                    }, active);
                    // let all generator calls run in parallel
                    return [4 /*yield*/, Promise.all(active)
                        // make bin executable
                    ];
                case 2:
                    // let all generator calls run in parallel
                    _a.sent();
                    // make bin executable
                    filesystem.chmodSync(props.name + "/bin/" + props.name, '755');
                    ext = props.typescript ? 'ts' : 'js';
                    filesystem.rename(props.name + "/src/commands/default." + ext, props.name + "." + ext);
                    yarnOrNpm = system.which('yarn') ? 'yarn' : 'npm';
                    return [4 /*yield*/, system.spawn("cd " + props.name + " && " + yarnOrNpm + " install --silent && " + yarnOrNpm + " run --quiet format", {
                            shell: true,
                            stdio: 'inherit',
                            stderr: 'inherit',
                        })];
                case 3:
                    _a.sent();
                    print.info(colors.green("Generated " + props.name + " CLI with Gluegun " + meta.version() + "."));
                    print.info("");
                    print.info("Next:");
                    print.info("  $ cd " + props.name);
                    print.info("  $ " + yarnOrNpm + " test");
                    print.info("  $ " + yarnOrNpm + " link");
                    print.info("  $ " + props.name);
                    print.info("");
                    if (props.typescript) {
                        print.info(colors.gray("Since you generated a TypeScript project, we've included a build script."));
                        print.info(colors.gray("When you link and run the project, it will use ts-node locally to test."));
                        print.info(colors.gray("However, you can test the generated JavaScript locally like this:"));
                        print.info("");
                        print.info("  $ " + yarnOrNpm + " build");
                        print.info("  $ " + props.name + " --compiled-build");
                        print.info("");
                    }
                    // for tests
                    return [2 /*return*/, "new " + toolbox.parameters.first];
            }
        });
    }); },
};
exports.default = NewCommand;
//# sourceMappingURL=new.js.map